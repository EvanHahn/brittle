import test from '../../index.js'

test('exception fails when an error is native', async ({ exception }) => {
  exception(() => { throw ReferenceError('test') })
  exception(() => { throw SyntaxError('test') })
  exception(() => { throw RangeError('test') })
  exception(() => { throw EvalError('test') })
  exception(() => { throw TypeError('test') })
  exception(async () => { throw ReferenceError('test') })
  exception(async () => { throw SyntaxError('test') })
  exception(async () => { throw RangeError('test') })
  exception(async () => { throw EvalError('test') })
  exception(async () => { throw TypeError('test') })
  exception(Promise.reject(ReferenceError('test')))
  exception(Promise.reject(SyntaxError('test')))
  exception(Promise.reject(RangeError('test')))
  exception(Promise.reject(EvalError('test')))
  exception(Promise.reject(TypeError('test')))
})

test('exception.all does not fails when an error is native', async ({ exception }) => {
  exception.all(() => { throw ReferenceError('test') })
  exception.all(() => { throw SyntaxError('test') })
  exception.all(() => { throw RangeError('test') })
  exception.all(() => { throw EvalError('test') })
  exception.all(() => { throw TypeError('test') })
  exception.all(async () => { throw ReferenceError('test') })
  exception.all(async () => { throw SyntaxError('test') })
  exception.all(async () => { throw RangeError('test') })
  exception.all(async () => { throw EvalError('test') })
  exception.all(async () => { throw TypeError('test') })
  exception.all(Promise.reject(ReferenceError('test')))
  exception.all(Promise.reject(SyntaxError('test')))
  exception.all(Promise.reject(RangeError('test')))
  exception.all(Promise.reject(EvalError('test')))
  exception.all(Promise.reject(TypeError('test')))
})
